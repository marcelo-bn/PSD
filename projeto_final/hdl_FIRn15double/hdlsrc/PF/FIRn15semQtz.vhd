-- -------------------------------------------------------------
-- 
-- File Name: /home/aluno/Documentos/PSD/PF/hdl_FIRn15double/hdlsrc/PF/FIRn15semQtz.vhd
-- Created: 2020-08-11 07:28:47
-- 
-- Generated by MATLAB 8.5 and HDL Coder 3.6
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: FIRn15semQtz
-- Source Path: PF/DUT/FIRn15semQtz
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY FIRn15semQtz IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        Input                             :   IN    real;  -- double
        Output                            :   OUT   real  -- double
        );
END FIRn15semQtz;


ARCHITECTURE rtl OF FIRn15semQtz IS

  -- Signals
  SIGNAL BodyDelay2_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay3_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay4_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay5_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay6_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay7_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay8_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay9_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay10_out1                 : real := 0.0;  -- double
  SIGNAL BodyDelay11_out1                 : real := 0.0;  -- double
  SIGNAL BodyDelay12_out1                 : real := 0.0;  -- double
  SIGNAL BodyDelay13_out1                 : real := 0.0;  -- double
  SIGNAL BodyDelay14_out1                 : real := 0.0;  -- double
  SIGNAL BodyDelay15_out1                 : real := 0.0;  -- double
  SIGNAL b_2_out1                         : real := 0.0;  -- double
  SIGNAL b_15_out1                        : real := 0.0;  -- double
  SIGNAL b_14_out1                        : real := 0.0;  -- double
  SIGNAL b_13_out1                        : real := 0.0;  -- double
  SIGNAL b_12_out1                        : real := 0.0;  -- double
  SIGNAL b_11_out1                        : real := 0.0;  -- double
  SIGNAL b_10_out1                        : real := 0.0;  -- double
  SIGNAL b_9_out1                         : real := 0.0;  -- double
  SIGNAL b_8_out1                         : real := 0.0;  -- double
  SIGNAL b_7_out1                         : real := 0.0;  -- double
  SIGNAL b_6_out1                         : real := 0.0;  -- double
  SIGNAL b_5_out1                         : real := 0.0;  -- double
  SIGNAL b_4_out1                         : real := 0.0;  -- double
  SIGNAL b_3_out1                         : real := 0.0;  -- double
  SIGNAL b_1_out1                         : real := 0.0;  -- double
  SIGNAL BodyLSum2_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum3_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum4_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum5_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum6_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum7_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum8_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum9_out1                   : real := 0.0;  -- double
  SIGNAL BodyLSum10_out1                  : real := 0.0;  -- double
  SIGNAL BodyLSum11_out1                  : real := 0.0;  -- double
  SIGNAL BodyLSum12_out1                  : real := 0.0;  -- double
  SIGNAL BodyLSum13_out1                  : real := 0.0;  -- double
  SIGNAL BodyLSum14_out1                  : real := 0.0;  -- double
  SIGNAL BodyLSum15_out1                  : real := 0.0;  -- double
  SIGNAL BodyDelay16_out1                 : real := 0.0;  -- double
  SIGNAL b_16_out1                        : real := 0.0;  -- double
  SIGNAL BodyLSum16_out1                  : real := 0.0;  -- double

BEGIN
  BodyDelay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay2_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay2_out1 <= Input;
      END IF;
    END IF;
  END PROCESS BodyDelay2_process;


  BodyDelay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay3_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay3_out1 <= BodyDelay2_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay3_process;


  BodyDelay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay4_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay4_out1 <= BodyDelay3_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay4_process;


  BodyDelay5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay5_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay5_out1 <= BodyDelay4_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay5_process;


  BodyDelay6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay6_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay6_out1 <= BodyDelay5_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay6_process;


  BodyDelay7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay7_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay7_out1 <= BodyDelay6_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay7_process;


  BodyDelay8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay8_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay8_out1 <= BodyDelay7_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay8_process;


  BodyDelay9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay9_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay9_out1 <= BodyDelay8_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay9_process;


  BodyDelay10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay10_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay10_out1 <= BodyDelay9_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay10_process;


  BodyDelay11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay11_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay11_out1 <= BodyDelay10_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay11_process;


  BodyDelay12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay12_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay12_out1 <= BodyDelay11_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay12_process;


  BodyDelay13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay13_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay13_out1 <= BodyDelay12_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay13_process;


  BodyDelay14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay14_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay14_out1 <= BodyDelay13_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay14_process;


  BodyDelay15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay15_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay15_out1 <= BodyDelay14_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay15_process;


  b_2_out1 <= (-0.468249447094867) * BodyDelay2_out1;

  b_15_out1 <= (-0.468249447094867) * BodyDelay15_out1;

  b_14_out1 <= (-0.0181458335529196) * BodyDelay14_out1;

  b_13_out1 <= (-0.057919405536987) * BodyDelay13_out1;

  b_12_out1 <= 0.808711927137104 * BodyDelay12_out1;

  b_11_out1 <= 0.514373785443998 * BodyDelay11_out1;

  b_10_out1 <= (-3.30154223899505) * BodyDelay10_out1;

  b_9_out1 <= 2.20774610833569 * BodyDelay9_out1;

  b_8_out1 <= 2.20774610833569 * BodyDelay8_out1;

  b_7_out1 <= (-3.30154223899505) * BodyDelay7_out1;

  b_6_out1 <= 0.514373785443998 * BodyDelay6_out1;

  b_5_out1 <= 0.808711927137104 * BodyDelay5_out1;

  b_4_out1 <= (-0.057919405536987) * BodyDelay4_out1;

  b_3_out1 <= (-0.0181458335529196) * BodyDelay3_out1;

  b_1_out1 <= 0.276784850536256 * Input;

  BodyLSum2_out1 <= b_2_out1 + b_1_out1;

  BodyLSum3_out1 <= b_3_out1 + BodyLSum2_out1;

  BodyLSum4_out1 <= b_4_out1 + BodyLSum3_out1;

  BodyLSum5_out1 <= b_5_out1 + BodyLSum4_out1;

  BodyLSum6_out1 <= b_6_out1 + BodyLSum5_out1;

  BodyLSum7_out1 <= b_7_out1 + BodyLSum6_out1;

  BodyLSum8_out1 <= b_8_out1 + BodyLSum7_out1;

  BodyLSum9_out1 <= b_9_out1 + BodyLSum8_out1;

  BodyLSum10_out1 <= b_10_out1 + BodyLSum9_out1;

  BodyLSum11_out1 <= b_11_out1 + BodyLSum10_out1;

  BodyLSum12_out1 <= b_12_out1 + BodyLSum11_out1;

  BodyLSum13_out1 <= b_13_out1 + BodyLSum12_out1;

  BodyLSum14_out1 <= b_14_out1 + BodyLSum13_out1;

  BodyLSum15_out1 <= b_15_out1 + BodyLSum14_out1;

  BodyDelay16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      BodyDelay16_out1 <= 0.0;
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        BodyDelay16_out1 <= BodyDelay15_out1;
      END IF;
    END IF;
  END PROCESS BodyDelay16_process;


  b_16_out1 <= 0.276784850536256 * BodyDelay16_out1;

  BodyLSum16_out1 <= BodyLSum15_out1 + b_16_out1;

  Output <= BodyLSum16_out1;

END rtl;

